#!/usr/bin/env ruby

require "rubygems"
require "logger"
require "optparse"
require "ostruct"
require "json"
require_relative "../lib/tecfiler.rb"

PROGNAME = File.basename($0)

USAGE = "usage: #{PROGNAME} [OPTIONS] FILENAME.pdf COH_ID"

@log = Logger.new($stderr)
@log.level = Logger::INFO

def die(*mssg)
  mssg[0].insert(0, PROGNAME + ": ") unless mssg[0] =~ /^usage:/
  STDERR.puts(mssg)
  exit(1)
end

@options = OpenStruct.new({
  # notused
})

begin
  OptionParser.new do |opts|

    opts.banner = USAGE
    opts.separator "\noptions:"

    opts.on("-v", "--[no-]verbose",
      "Show debugging log messages. Sets log level to DEBUG."
    ) {|flag| @log.level = (flag ? Logger::DEBUG : Logger::INFO)}

    opts.on("-q", "--[no-]quiet",
      "Suppress informational log messages. Sets log level to WARN."
    ) {|flag| @log.level = (flag ? Logger::WARN : Logger::INFO)}      
      
    opts.on("-h", "-?", "--help",
      "Show help, including default values."
    ) {puts opts; exit}

  end.parse!
rescue OptionParser::ParseError => e
  die(e.message, USAGE)
end

die(USAGE) unless ARGV.length == 2
@fn, @id = ARGV

TECFiler::initialize

coh = TECFiler::Model::COH.get(@id.to_i)
die "failed to retrieve COH id #{@id}" unless coh
@log.info "retrieved COH entity id #{coh.id}"

TECFiler::FormGenerator::produce(@fn, coh)
@log.info "report stored to #{@fn}"
